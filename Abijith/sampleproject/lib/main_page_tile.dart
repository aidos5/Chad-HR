import 'dart:io';
// ignore_for_file: prefer_const_constructors
import 'package:flutter/material.dart';
import 'package:sampleproject/SecureStorage.dart';
import 'package:sampleproject/model/DeployedForm.dart';
import 'package:sampleproject/sidebar.dart';
import 'package:web3dart/contracts.dart';

import 'form_tile.dart';
import 'FormBuilder.dart';

import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'model/FormDetails.dart';
import 'model/ProcessStep.dart';
import 'package:simple_json_form/simple_json_form.dart';
import 'package:multi_select_flutter/multi_select_flutter.dart';
import 'dart:convert';

import 'package:sampleproject/model/UserCredentials.dart';

import 'package:json_dynamic_form/JsonDynamicForm.dart';
import 'package:json_dynamic_form/models/Autogenerated.dart';
import 'package:json_dynamic_form/models/Values.dart';

class MainPageTile extends StatefulWidget {
  MainPageTile({Key? key, required this.itemNo}) : super(key: key);
  final int itemNo;
  MainPageTile.withitemNo(
    final this.itemNo,
  );

  @override
  State<MainPageTile> createState() => _MainPageTileState(itemNo);
}

class _MainPageTileState extends State<MainPageTile> {
  List<dynamic> data = [
    {
      "type": "text",
      "label": "Text",
      "description": "Enter your name",
      "placeholder": "Enter your name",
      "regex": "",
      "errorText": "",
      "required": true,
      "name": "text-1622684775448"
    },
    {
      "type": "email",
      "label": "Email",
      "description": "Enter your email",
      "placeholder": "Enter your email",
      "regex": "",
      "errorText": "Please enter a valid email",
      "required": true,
      "name": "email-1622684776606"
    },
    {
      "type": "phone",
      "label": "Phone",
      "description": "Enter your phone",
      "placeholder": "Enter your phone",
      "regex": "",
      "errorText": "Please enter a valid phone number",
      "required": false,
      "name": "phone-1622684777910"
    },
    {
      "type": "checkbox",
      "label": "Checkbox",
      "description": "Checkbox",
      "values": [
        {"label": "Option 1", "value": "option-1"},
        {"label": "Option 2", "value": "option-2"}
      ],
      "name": "checkbox-1622684784550"
    },
    {
      "type": "radio",
      "label": "Radio",
      "description": "Radio boxes",
      "values": [
        {"label": "Option 1", "value": "option-1"},
        {"label": "Option 2", "value": "option-2"}
      ],
      "name": "radio-1622684785878"
    },
    {
      "type": "number",
      "label": "Number",
      "description": "Age",
      "placeholder": "Enter your age",
      "min": 12,
      "max": 90,
      "name": "number-1622684779623"
    },
    {
      "type": "autocomplete",
      "label": "Select",
      "description": "Select",
      "placeholder": "Select",
      "values": [
        {"label": "Option 1", "value": "option-1"},
        {"label": "Option 2", "value": "option-2"},
        {"label": "Option 3", "value": "option-3"}
      ],
      "name": "autocomplete-1622684787710"
    },
    {
      "type": "autocomplete",
      "label": "Select",
      "description": "Select",
      "placeholder": "Select",
      "values": [
        {"label": "Option 4", "value": "option-4"},
        {"label": "Option 5", "value": "option-5"},
        {"label": "Option 6", "value": "option-6"}
      ],
      "name": "autocomplete-prueba"
    }
  ];

  final storage = new SecureStorage(FlutterSecureStorage());
  List<String> usercreds_string = [];
  List<String> deployedForms_string = [];
  List<DeployedForm?>? PendingForms = [];
  List<String?>? CheckStep = [];
  //List<DeployedForm?>? InputForms = [];

  List<DeployedForm> deployedForms = [];
  UserCredentials? currentuser;

  _MainPageTileState(this.itemNo);
  final int itemNo;
  int? currentDeployedFormIndex;
  int? currentStepIndex;

  late JsonDynamicForm jsonDynamicForm;
  List<Widget>? fields = List<Widget>.empty(growable: true);

  @override
  void initState() {
    DoStuff();

    super.initState();
  }

  void DoStuff() async {
    await CurrentUser();
    await GetDeployedForms();
    await CheckPending();

    var formData =
        jsonDecode(PendingForms![itemNo]!.formDetails!.formJSON ?? "");

    jsonDynamicForm = JsonDynamicForm(data: formData, setState: setState);

    fields = jsonDynamicForm.generateFields();
  }

  Future CurrentUser() async {
    String? usercreds = await storage.read(key: 'currentUser');

    currentuser = UserCredentials.fromJson(jsonDecode(usercreds ?? ""));
  }

  Future GetDeployedForms() async {
    deployedForms = [];
    //Populate form builder texts list
    String? jsonString = await storage.read(key: 'deployedForms');
    setState(() {
      deployedForms_string =
          (jsonDecode(jsonString ?? "") as List<dynamic>).cast<String>();
    });

    for (String s in deployedForms_string) {
      Map<String, dynamic> data = jsonDecode(s);

      deployedForms.add(DeployedForm.fromJson(data));
    }
    //print(deployedForms_string);
    //print(deployedForms);
  }

  Future CheckPending() async {
    for (int i = 0; i < deployedForms.length; i++) {
      // print('${deployedForms[i].formDetails!.processSteps![i].stepPerformers}');
      for (int j = 0;
          j < deployedForms[i].formDetails!.processSteps!.length;
          j++) {
        if (deployedForms[i]
                .formDetails!
                .processSteps![j]
                .stepPerformers!
                .contains(currentuser!.userName) &&
            deployedForms[i].formDetails!.processSteps![j].stepCompleted ==
                false) {
          //print('Namskara Gandu');
          if (deployedForms[i].formDetails!.processSteps![j].stepType! ==
                  'Input Step' ||
              deployedForms[i].formDetails!.processSteps![j].stepType! ==
                  'Approval Step') {
            //print('Lowde');
            currentDeployedFormIndex = i;
            currentStepIndex = j;
            PendingForms!.add(deployedForms[i]);
            CheckStep!
                .add(deployedForms[i].formDetails!.processSteps![j].stepType);
            break;
          }
        }
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // fields = jsonDynamicForm.generateFields(firstTime: false);

    var screenwidth = MediaQuery.of(context).size.width;
    var screenheight = MediaQuery.of(context).size.height;
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(5),
        color: Colors.blue,
      ),
      width: screenwidth / 10,
      height: screenheight / 3,
      margin: const EdgeInsets.fromLTRB(35, 20, 20, 10),
      child: Column(
        children: [
          Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Column(
                children: [
                  Container(
                    child: Padding(
                      padding: const EdgeInsets.all(15.0),
                      child: Text(
                        '${PendingForms![itemNo]!.formDetails?.formName}',

                        // Add Form Details
                        style: TextStyle(
                            fontSize: 22,
                            fontWeight: FontWeight.w600,
                            color: Color.fromARGB(185, 0, 0, 0),
                            decoration: TextDecoration.underline),
                      ),
                    ),
                  ),
                  if (CheckStep![itemNo] == 'Input Step')
                    MaterialButton(
                      color: Colors.red,
                      onPressed: () {
                        OpenForm(PendingForms![itemNo]!.formDetails!);
                      },
                      child: const Text(
                        'Input',
                        style: TextStyle(
                          color: Colors.black,
                        ),
                      ),
                    ),
                  if (CheckStep![itemNo] == 'Approval Step')
                    MaterialButton(
                      color: Colors.red,
                      onPressed: () {},
                      child: const Text(
                        'Approve',
                        style: TextStyle(
                          color: Colors.black,
                        ),
                      ),
                    ),
                ],
              ),
            ],
          ),
          // Expanded(
          //   child: ListTile(
          //     tileColor: Colors.blue,
          //     onTap: () {},
          //     hoverColor: Colors.orange,
          //   ),
          // ),
        ],
      ),
    );
  }

  OpenForm(FormDetails formDetails) {
    showDialog(
        context: context,
        builder: (context) => StatefulBuilder(builder: (context, setState) {
              print(jsonDecode(formDetails.formJSON ?? ""));
              return Dialog(
                child: Scaffold(
                  appBar: AppBar(
                    title: Text(formDetails.formName ?? "No Name"),
                  ),
                  body: SingleChildScrollView(
                    child: Column(
                      children: [
                        Column(children: fields!
                            // SimpleJsonForm(
                            //   jsonSchema: JsonSchema.fromJson(
                            //       jsonDecode(formDetails.formJSON ?? "")),
                            //   title: formDetails.formName,
                            //   titleStyle: const TextStyle(
                            //     fontWeight: FontWeight.bold,
                            //     fontSize: 15,
                            //   ),
                            //   description: "Fill the form carefully!",
                            //   crossAxisAlignment: CrossAxisAlignment.center,
                            //   index: 0,
                            //   imageUrl: '',
                            //   defaultValues: DefaultValues().copyWith(
                            //     nextButtonText: 'Next',
                            //     // hintDropdownText: 'Elija una opcion',
                            //     previousButtonText: 'Previous',
                            //     submitButtonText: 'Submit',
                            //     // validationDescription: 'Algunos campos requeridos faltan',
                            //     validationTitle: 'Wrong Wrong Wrong...',
                            //     fieldRequired: 'Give some value',
                            //   ),
                            //   descriptionStyleText: const TextStyle(
                            //     color: Colors.lightBlue,
                            //   ),
                            //   titleStyleText: const TextStyle(
                            //     fontWeight: FontWeight.bold,
                            //     fontSize: 16,
                            //     color: Colors.blue,
                            //   ),
                            //   onSubmit: (val) {
                            //     if (val == null) {
                            //       //print("no data");
                            //     } else {
                            //       var json = jsonEncode(val.toJson());
                            //       //print(json);
                            //     }
                            //   },
                            // ),
                            ),
                        TextButton(
                            onPressed: () async {
                              // List<DeployedForm> depForms = [];
                              // for (String s in deployedForms_string) {
                              //   Map<String, dynamic> data = jsonDecode(s);
                              //   depForms.add(DeployedForm.fromJson(data));
                              // }

                              deployedForms[currentDeployedFormIndex ?? 0]
                                      .formDetails!
                                      .processSteps![currentStepIndex ?? 0]
                                      .inputRecorded =
                                  jsonEncode(jsonDynamicForm.printData());

                              print(jsonEncode(jsonDynamicForm.printData()));

                              deployedForms[currentDeployedFormIndex ?? 0]
                                  .formDetails!
                                  .processSteps![currentStepIndex ?? 0]
                                  .stepCompleted = true;

                              if (currentStepIndex ==
                                  deployedForms[currentDeployedFormIndex ?? 0]
                                          .formDetails!
                                          .processSteps!
                                          .length -
                                      1) {
                                deployedForms[currentDeployedFormIndex??0]
                                    .formStatus = true;
                              }

                              deployedForms_string[
                                  currentDeployedFormIndex ??
                                      0] = jsonEncode(
                                  deployedForms[currentDeployedFormIndex ?? 0]
                                      .toJson());

                              await storage.write(
                                  key: 'deployedForms',
                                  value: jsonEncode(deployedForms_string));

                              await GetDeployedForms();

                              setState(() {});
                              Navigator.pop(context);
                            },
                            child: Padding(
                              padding: const EdgeInsets.all(10),
                              child: Text("Submit"),
                            ))
                      ],
                    ),
                  ),
                ),
              );
            }));
  }
}
